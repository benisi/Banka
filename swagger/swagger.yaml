---
swagger: "2.0"
info:
  description: "Banka is a light weight bank application for performing simple banka service like credit, debit and account creation. \nApi on [http://benisi-banka.herokuapp.com](http://benisi-banka.herokuapp.com) \n"
  version: 1.0.0
  title: Banka
  contact:
    email: oseikwemeisidahomen@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
host: benisi-banka.herokuapp.com
basePath: /api/v1
tags:
- name: user
  description: Operations about user
- name: account
  description: Operations about bank account
- name: transaction
  description: Operations about account transactions
schemes:
- https
- http
security:
- Authorization: []
paths:
  /auth/signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: successful operation
        400:
          description: error, operation not successful
  /auth/admin/signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createAdminUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/AdminUser'
      responses:
        200:
          description: successful operation
        400:
          description: error, operation not successful
  /auth/signin:
    post:
      tags:
      - user
      summary: Login User
      description: User can login using this endpoint.
      operationId: LoginUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Login user object
        required: true
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: successful operation
        400:
          description: error, operation not successful
  /accounts/{accountnumber}:
    get:
      tags:
      - account
      summary: view a specific bank account
      description: This can only be done by the logged in user.
      operationId: getASpecificUserBankAccount
      produces:
      - application/json
      parameters:
      - name: accountnumber
        in: path
        description: accountnumber of user whose bank account we want to reteieve
        required: true
        type: string
      responses:
        400:
          description: account number must be an integer
        404:
          description: You don't have an account yet
    delete:
      tags:
      - account
      summary: Delete bank account
      description: This can only be done by the logged in user.
      operationId: deleteAccount
      produces:
      - application/json
      parameters:
      - name: accountnumber
        in: path
        description: The account number that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: account number must be an integer
        404:
          description: Account {accountnumber} does not exist
  /user/{email}/accounts:
    get:
      tags:
      - user
      summary: get all bank account
      description: This can only be done by the logged in user.
      operationId: getAllUserBankAccount
      produces:
      - application/json
      parameters:
      - name: email
        in: path
        description: email of user whose bank account we want to reteieve
        required: true
        type: string
      responses:
        400:
          description: account number must be an integer
        404:
          description: You don't have an account yet
  /accounts:
    get:
      tags:
      - account
      summary: view all bank account
      description: This can only be done by the logged in user.
      operationId: getALLUserBankAccount
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: should retrieve all bank account according to status
        required: false
        type: string
      responses:
        400:
          description: account number must be an integer
        404:
          description: You don't have an account yet
    post:
      tags:
      - account
      summary: Create account
      description: This can only be done by the logged in user.
      operationId: createAccount
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created account object
        required: true
        schema:
          $ref: '#/definitions/CreateAccount'
      responses:
        200:
          description: successful operation
        400:
          description: error, operation not successful
  /account/{accountnumber}:
    patch:
      tags:
      - account
      summary: change account status
      operationId: changeAccountStatus
      produces:
      - application/json
      parameters:
      - name: accountnumber
        in: path
        description: Change account status.
        required: true
        type: string
      - in: body
        name: body
        description: Created account object
        required: true
        schema:
          $ref: '#/definitions/AccountStatus'
      responses:
        200:
          description: successful operation
        400:
          description: account number must be an integer
        404:
          description: Account {accountnumber} does not exist
  /accounts/{accountnumber}/transactions:
    get:
      tags:
      - account
      summary: get all bank account transaction
      description: This can only be done by the logged in user.
      operationId: getAllAccountTransaction
      produces:
      - application/json
      parameters:
      - name: accountnumber
        in: path
        description: The account number that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: account number must be an integer
        404:
          description: Account {accountnumber} does not exist
  /transactions/{accountnumber}/credit:
    post:
      tags:
      - transaction
      summary: credit bank account
      operationId: transactionCredit
      produces:
      - application/json
      parameters:
      - name: accountnumber
        in: path
        description: Credit account.
        required: true
        type: string
      - in: body
        name: body
        description: Created account object
        required: true
        schema:
          $ref: '#/definitions/AccountTransaction'
      responses:
        200:
          description: successful operation
        400:
          description: account number must be an integer
        404:
          description: Account {accountnumber} does not exist
  /transactions/{accountnumber}/debit:
    post:
      tags:
      - transaction
      summary: debit bank account
      operationId: transactionDebit
      produces:
      - application/json
      parameters:
      - name: accountnumber
        in: path
        description: Credit account.
        required: true
        type: string
      - in: body
        name: body
        description: Created account object
        required: true
        schema:
          $ref: '#/definitions/AccountTransaction'
      responses:
        200:
          description: successful operation
        400:
          description: account number must be an integer
        404:
          description: Account {accountnumber} does not exist
  /transactions/{transactionId}:
    get:
      tags:
      - transaction
      summary: get a bank account transaction by id
      description: This can only be done by the logged in user.
      operationId: getABankAccountTransaction
      produces:
      - application/json
      parameters:
      - name: transactionId
        in: path
        description: The transaction id we need to retrieve
        required: true
        type: string
      responses:
        400:
          description: transaction id must be an integer
        404:
          description: The data you are looking for could not be found
securityDefinitions:
  Authorization:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      stateOfResidence:
        type: string
      title:
        type: string
      email:
        type: string
      dateOfBirth:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      sex:
        type: string
        description: User sex, only allow male and female
    xml:
      name: User
  AdminUser:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      stateOfResidence:
        type: string
      title:
        type: string
      email:
        type: string
      dateOfBirth:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      sex:
        type: string
        description: User sex, only allow male and female
      isSuperAdmin:
        type: boolean
        description: use to determine the type of aadmin
    xml:
      name: User
  Login:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
    xml:
      name: User
  CreateAccount:
    type: object
    properties:
      type:
        type: string
      category:
        type: string
    xml:
      name: Account
  AccountStatus:
    type: object
    properties:
      status:
        type: string
        description: must either be activate or deactivate
    xml:
      name: Account
  AccountTransaction:
    type: object
    properties:
      amount:
        type: integer
        description: the amount you want to debit or credit
    xml:
      name: Account
